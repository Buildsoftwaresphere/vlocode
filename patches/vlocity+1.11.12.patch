diff --git a/node_modules/vlocity/lib/datapacks.js b/node_modules/vlocity/lib/datapacks.js
index 4c3b118..f6d4f2d 100644
--- a/node_modules/vlocity/lib/datapacks.js
+++ b/node_modules/vlocity/lib/datapacks.js
@@ -123,6 +123,11 @@ DataPacks.prototype.getStorageLimitExceededError = function() {
 DataPacks.prototype.runDataPackProcess = async function(dataPackData, options) {
     var self = this;
 
+    if (options.cancellationToken && options.cancellationToken.isCancellationRequested) {
+        VlocityUtils.warn('Detected cancellation requested. Skipping further job processing.');
+        throw new Error('Operation Cancelled');
+    }
+
     if (options && dataPackData && dataPackData.processData) {
 
         Object.keys(options).forEach(function(optionKey){
@@ -171,6 +176,11 @@ DataPacks.prototype.runDataPackProcess = async function(dataPackData, options) {
 
             let result = await self.vlocity.jsForceConnection.apex.post(self.dataPacksEndpoint(), dataPackData);
 
+            if (options.cancellationToken && options.cancellationToken.isCancellationRequested) {
+                VlocityUtils.warn('Detected cancellation requested. Skipping further job processing.');
+                return { VlocityDataPackId: dataPackId, message: 'Operation Cancelled', dataPackError: true, Status: 'Cancelled' };
+            }
+
             VlocityUtils.verbose('Result', result);
 
             if (!result) {
@@ -208,16 +218,17 @@ DataPacks.prototype.runDataPackProcess = async function(dataPackData, options) {
                 result.Total = 1;
             }    
 
-            if (result.Total > 0 
-                && !result.Async 
-                && dataPackData.processType == "Export" 
-                && result.Status != "Complete"
-                && (!options.maxDepth 
-                    || options.maxDepth == -1)
-                && options.exportPacksMaxSize 
-                && result.Total > options.exportPacksMaxSize) {
-                    result.Status = "Complete";
-            }
+            // Disable this as it causes dependencies to be ommited resulting in partial exports.
+            // if (result.Total > 0 
+            //     && !result.Async 
+            //     && dataPackData.processType == "Export" 
+            //     && result.Status != "Complete"
+            //     && (!options.maxDepth 
+            //         || options.maxDepth == -1)
+            //     && options.exportPacksMaxSize 
+            //     && result.Total > options.exportPacksMaxSize) {
+            //         result.Status = "Complete";
+            // }
 
             if (result.Total > 0 && result.Async && result.Total == result.Finished) {
                 result.Finished--;
diff --git a/node_modules/vlocity/lib/datapacksbuilder.js b/node_modules/vlocity/lib/datapacksbuilder.js
index 7ab38ff..76c8b6f 100644
--- a/node_modules/vlocity/lib/datapacksbuilder.js
+++ b/node_modules/vlocity/lib/datapacksbuilder.js
@@ -14,7 +14,7 @@ var DataPacksBuilder = module.exports = function(vlocity) {
 
     this.compileQueue = []; // array with files that require compilation
 
-    this.defaultdatapack = fs.readFileSync(path.join(__dirname, 'defaultdatapack.json'), 'utf8');
+    this.defaultdatapack = require('./defaultdatapack.json');
 
     this.dataPackSizes = {};
 
@@ -347,7 +347,7 @@ DataPacksBuilder.prototype.getFileData = function() {
     return this.allFileDataMap[path.normalize(pathString).toLowerCase()];
 }
 
-DataPacksBuilder.prototype.setFileData = async function(filePath, filePath, encoding) {
+DataPacksBuilder.prototype.setFileData = async function(filePath, encoding) {
     var data = await fs.readFile(filePath, encoding);
 
     if (!this.allFileDataMap) {
@@ -387,7 +387,7 @@ DataPacksBuilder.prototype.loadFilesAtPath = async function(srcpath, jobInfo, da
             encoding = 'utf8';
         }
         var filemapkey = path.normalize(path.join(srcpath, filename));
-        filePromises.push(this.setFileData(filemapkey, filemapkey, encoding));
+        filePromises.push(this.setFileData(filemapkey, encoding));
     }
 
     if (filePromises.length > 0) {
@@ -707,12 +707,19 @@ DataPacksBuilder.prototype.getNextImports = function(importPath, jobInfo, curren
                                 return;
                             }
 
-                            if (jobInfo.currentStatus[parentKey] != null 
-                                && !(jobInfo.currentStatus[parentKey] == 'Success' 
+                            if (jobInfo.currentStatus[parentKey] != null ) {
+                                if (jobInfo.currentStatus[parentKey] == 'Success' 
                                     || jobInfo.currentStatus[parentKey] == 'Header' 
-                                    || jobInfo.currentStatus[parentKey] == 'AddedHeader') 
-                                && currentDataPackKeysInImport[parentKey] != true) {
-                                needsParents = true;
+                                    || jobInfo.currentStatus[parentKey] == 'AddedHeader')  {
+                                    VlocityUtils.verbose(`Parent deployed (datapack: ${dataPackKey}): ${parentKey}`);
+                                } else if (currentDataPackKeysInImport[parentKey] == true) {                                    
+                                    VlocityUtils.verbose(`Parent in current import (datapack: ${dataPackKey}): ${parentKey}`);
+                                } else {
+                                    VlocityUtils.verbose(`Skipping over ${dataPackKey}; parent not yet deployed: ${parentKey}; parent status: ${jobInfo.currentStatus[parentKey]}`);
+                                    needsParents = true;
+                                }
+                            } else {
+                                VlocityUtils.verbose(`Skipping unknown dependency ${parentKey} from datapack: ${dataPackKey}`);
                             }
                         });
 
@@ -770,6 +777,7 @@ DataPacksBuilder.prototype.getNextImports = function(importPath, jobInfo, curren
                                 && jobInfo.currentStatus[referenceKey] 
                                 && !(jobInfo.currentStatus[referenceKey] == 'Success' 
                                 || jobInfo.currentStatus[referenceKey] == 'Header')) {
+                                VlocityUtils.log(`Skipping over ${dataPackKey}; refernce not yet deployed: ${referenceKey}`);
                                 hasReference = true;
                             }
                         }
diff --git a/node_modules/vlocity/lib/datapackserrorhandling.js b/node_modules/vlocity/lib/datapackserrorhandling.js
index f475d46..4aabfe9 100644
--- a/node_modules/vlocity/lib/datapackserrorhandling.js
+++ b/node_modules/vlocity/lib/datapackserrorhandling.js
@@ -4,7 +4,7 @@ var yaml = require('js-yaml');
 
 var DataPacksErrorHandling = module.exports = function(vlocity) {
     this.vlocity = vlocity || {};
-    this.errorHandlingDefinition = yaml.safeLoad(fs.readFileSync(path.join(__dirname, "datapackserrorhandling.yaml"), 'utf8'));
+    this.errorHandlingDefinition = require("./datapackserrorhandling.yaml");
 };
 
 DataPacksErrorHandling.prototype.getSanitizedErrorMessage = async function(jobInfo, dataPack) {
diff --git a/node_modules/vlocity/lib/datapacksjob.js b/node_modules/vlocity/lib/datapacksjob.js
index b4f97c8..f10bf9b 100644
--- a/node_modules/vlocity/lib/datapacksjob.js
+++ b/node_modules/vlocity/lib/datapacksjob.js
@@ -7,8 +7,8 @@ var childProcess = require('child_process');
 var DataPacksJob = module.exports = function(vlocity) {
     this.vlocity = vlocity || {};
 
-    this.defaultJobSettings = yaml.safeLoad(fs.readFileSync(path.join(__dirname, 'defaultjobsettings.yaml'), 'utf8'));
-    this.queryDefinitions = yaml.safeLoad(fs.readFileSync(path.join(__dirname, 'querydefinition.yaml'), 'utf8'));
+    this.defaultJobSettings = require('./defaultjobsettings.yaml');
+    this.queryDefinitions = require('./querydefinition.yaml');
     this.runningParallel = {};
     this.vlocity.relationMap = new Map();
     this.vlocity.insertIndexToSfIdMap = new Map();
@@ -26,7 +26,8 @@ var SUPPORTED_JOB_KEY_TO_OPTION_MAP = {
     source: 'source',
     alreadyExportedKeys: 'alreadyExportedKeys',
     exportPacksMaxSize: 'exportPacksMaxSize',
-    useVlocityTriggers: 'useVlocityTriggers'
+    useVlocityTriggers: 'useVlocityTriggers',
+    cancellationToken: 'cancellationToken'
 };
 
 var MAX_PER_GROUP = 10;
@@ -2039,7 +2040,7 @@ DataPacksJob.prototype.deployPack = async function(inputMap) {
             throw e;
         }
 
-        VlocityUtils.error('Error', 'Deploying Pack', e.stack);
+        VlocityUtils.error('Error', 'Deploying Pack', e.stack || e);
     }
 }
 
diff --git a/node_modules/vlocity/lib/datapacksutils.js b/node_modules/vlocity/lib/datapacksutils.js
index 16b7f2e..e97f6ea 100644
--- a/node_modules/vlocity/lib/datapacksutils.js
+++ b/node_modules/vlocity/lib/datapacksutils.js
@@ -22,7 +22,7 @@ var DataPacksUtils = module.exports = function(vlocity) {
 
     CURRENT_INFO_FILE = path.join(vlocity.tempFolder, 'currentJobInfo.json');
 
-    this.dataPacksExpandedDefinition = yaml.safeLoad(fs.readFileSync(path.join(__dirname, 'datapacksexpanddefinition.yaml'), 'utf8'));
+    this.dataPacksExpandedDefinition = require('./datapacksexpanddefinition.yaml');
 
     this.runJavaScriptModules = {};
 
diff --git a/node_modules/vlocity/lib/datapacktypes/attributecategory.js b/node_modules/vlocity/lib/datapacktypes/attributecategory.js
index d1849c0..af04645 100644
--- a/node_modules/vlocity/lib/datapacktypes/attributecategory.js
+++ b/node_modules/vlocity/lib/datapacktypes/attributecategory.js
@@ -54,5 +54,5 @@ AttributeCategory.prototype.handleAttributeCategoryDisplaySequence = async funct
     var jobInfoCopy = JSON.parse(JSON.stringify(jobInfo));
 
     await this.vlocity.datapacksexpand.expand(jobInfoCopy.projectPath + '/' + jobInfoCopy.expansionPath, {dataPacks: [dataPackWithError]}, jobInfoCopy);
-    await this.vlocity.datapacksbuilder.setFileData(filePath, filePath, "utf8");
+    await this.vlocity.datapacksbuilder.setFileData(filePath, "utf8");
 };
\ No newline at end of file
diff --git a/node_modules/vlocity/lib/utilityservice.js b/node_modules/vlocity/lib/utilityservice.js
index dafa90e..2a2ce94 100644
--- a/node_modules/vlocity/lib/utilityservice.js
+++ b/node_modules/vlocity/lib/utilityservice.js
@@ -400,10 +400,10 @@ UtilityService.prototype.getPackageVersion = async function() {
     
     VlocityUtils.verbose('Get Package Version');
 
-    if (!this.vlocity.packageVersion) {
+    if (!this.vlocity.PackageVersion) {
         var result = await this.vlocity.jsForceConnection.query("SELECT DurableId, Id, IsSalesforce, MajorVersion, MinorVersion, Name, NamespacePrefix FROM Publisher where NamespacePrefix = \'" + this.vlocity.namespace + "\' LIMIT 1");
 
-        this.vlocity.buildToolsVersionSettings = yaml.safeLoad(fs.readFileSync(path.join(__dirname, "buildToolsVersionSettings.yaml"), 'utf8'));
+        this.vlocity.buildToolsVersionSettings = require('./buildToolsVersionSettings.yaml');
 
         this.vlocity.BuildToolSettingLatestVersion = this.vlocity.buildToolsVersionSettings.latest;
 
diff --git a/node_modules/vlocity/lib/validationtest.js b/node_modules/vlocity/lib/validationtest.js
index d85f750..6d7ed7e 100644
--- a/node_modules/vlocity/lib/validationtest.js
+++ b/node_modules/vlocity/lib/validationtest.js
@@ -17,7 +17,7 @@ ValidationTest.prototype.validate = async function(jobInfo, currentContextData)
     };
 
     self.jobInfo = jobInfo;
-    self.config = yaml.safeLoad(fs.readFileSync(path.join(__dirname, 'validationtestsettings.yaml'), 'utf8'));
+    self.config = require('./validationtestsettings.yaml');
     self.vlocityMatchingKeys = await self.vlocity.utilityservice.getDRMatchingKeyFields();
     var allTests = self.loadAllTests();
     var runTestData = await self.groupRunTestData(currentContextData, allTests);
