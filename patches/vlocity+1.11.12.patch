diff --git a/node_modules/vlocity/lib/datapacks.js b/node_modules/vlocity/lib/datapacks.js
index 4c3b118..f6d4f2d 100644
--- a/node_modules/vlocity/lib/datapacks.js
+++ b/node_modules/vlocity/lib/datapacks.js
@@ -123,6 +123,11 @@ DataPacks.prototype.getStorageLimitExceededError = function() {
 DataPacks.prototype.runDataPackProcess = async function(dataPackData, options) {
     var self = this;
 
+    if (options.cancellationToken && options.cancellationToken.isCancellationRequested) {
+        VlocityUtils.warn('Detected cancellation requested. Skipping further job processing.');
+        throw new Error('Operation Cancelled');
+    }
+
     if (options && dataPackData && dataPackData.processData) {
 
         Object.keys(options).forEach(function(optionKey){
@@ -171,6 +176,11 @@ DataPacks.prototype.runDataPackProcess = async function(dataPackData, options) {
 
             let result = await self.vlocity.jsForceConnection.apex.post(self.dataPacksEndpoint(), dataPackData);
 
+            if (options.cancellationToken && options.cancellationToken.isCancellationRequested) {
+                VlocityUtils.warn('Detected cancellation requested. Skipping further job processing.');
+                return { VlocityDataPackId: dataPackId, message: 'Operation Cancelled', dataPackError: true, Status: 'Cancelled' };
+            }
+
             VlocityUtils.verbose('Result', result);
 
             if (!result) {
@@ -208,16 +218,17 @@ DataPacks.prototype.runDataPackProcess = async function(dataPackData, options) {
                 result.Total = 1;
             }    
 
-            if (result.Total > 0 
-                && !result.Async 
-                && dataPackData.processType == "Export" 
-                && result.Status != "Complete"
-                && (!options.maxDepth 
-                    || options.maxDepth == -1)
-                && options.exportPacksMaxSize 
-                && result.Total > options.exportPacksMaxSize) {
-                    result.Status = "Complete";
-            }
+            // Disable this as it causes dependencies to be ommited resulting in partial exports.
+            // if (result.Total > 0 
+            //     && !result.Async 
+            //     && dataPackData.processType == "Export" 
+            //     && result.Status != "Complete"
+            //     && (!options.maxDepth 
+            //         || options.maxDepth == -1)
+            //     && options.exportPacksMaxSize 
+            //     && result.Total > options.exportPacksMaxSize) {
+            //         result.Status = "Complete";
+            // }
 
             if (result.Total > 0 && result.Async && result.Total == result.Finished) {
                 result.Finished--;
diff --git a/node_modules/vlocity/lib/datapacksbuilder.js b/node_modules/vlocity/lib/datapacksbuilder.js
index 7ab38ff..0b1ab61 100644
--- a/node_modules/vlocity/lib/datapacksbuilder.js
+++ b/node_modules/vlocity/lib/datapacksbuilder.js
@@ -1,8 +1,7 @@
-var yaml = require('js-yaml');
 var path = require('path');
 var fs = require('fs-extra');
-var sass = require('sass.js');
 var stringify = require('json-stable-stringify');
+var sass = null;
 
 var UTF8_EXTENSIONS = [ "css", "json", "yaml", "scss", "html", "js", "xml"];
 
@@ -14,7 +13,7 @@ var DataPacksBuilder = module.exports = function(vlocity) {
 
     this.compileQueue = []; // array with files that require compilation
 
-    this.defaultdatapack = fs.readFileSync(path.join(__dirname, 'defaultdatapack.json'), 'utf8');
+    this.defaultdatapack = JSON.stringify(require('./defaultdatapack.json'));
 
     this.dataPackSizes = {};
 
@@ -347,34 +346,53 @@ DataPacksBuilder.prototype.getFileData = function() {
     return this.allFileDataMap[path.normalize(pathString).toLowerCase()];
 }
 
-DataPacksBuilder.prototype.setFileData = async function(filePath, filePath, encoding) {
-    var data = await fs.readFile(filePath, encoding);
+DataPacksBuilder.prototype.setFileData = async function(filePath, encoding) {
+    //const data = await fs.readFile(filePath, encoding);
+    const fileKey = path.normalize(filePath).toLowerCase();
+    const isDatapackMeta = fileKey.endsWith('_datapack.json') || fileKey.endsWith('.json');
 
     if (!this.allFileDataMap) {
         this.allFileDataMap = {};
     }
 
-    this.allFileDataMap[path.normalize(filePath).toLowerCase()] = data;
-
-    try {
-        var dataPack = JSON.parse(data);
-
-        if (dataPack) {
-            if (!this.recordSourceKeyToFilePath) {
-                this.recordSourceKeyToFilePath = {};
+    // Define transparent lazy property on the all file datamap
+    Object.defineProperty(this.allFileDataMap, fileKey, {
+        get() {
+            // Initlize lazy loader cache on allFileDataMap obj
+            const cache = this['__cache'] || (this['__cache'] = new Map());
+            let fileData = cache.get(fileKey);
+            if (!fileData) {
+                // Ideally we make this an async function but for now
+                // keep it sync for simplicty and backawrd compaitiblity
+                fileData = fs.readFileSync(filePath, encoding);
+                cache.set(fileKey, fileData);
             }
+            return fileData;
+        }
+    });
+
+    if (isDatapackMeta) {
+        try {
+            var dataPack = JSON.parse(this.allFileDataMap[fileKey]);
+            if (dataPack) {
+                if (!this.recordSourceKeyToFilePath) {
+                    this.recordSourceKeyToFilePath = {};
+                }
                 
-            if (dataPack instanceof Array) {
-                for (data of dataPack) {
-                    if (data.VlocityRecordSourceKey) {
-                        this.recordSourceKeyToFilePath[data.VlocityRecordSourceKey] = path.normalize(filePath);    
+                if (dataPack instanceof Array) {
+                    for (data of dataPack) {
+                        if (data.VlocityRecordSourceKey) {
+                            this.recordSourceKeyToFilePath[data.VlocityRecordSourceKey] = path.normalize(filePath);    
+                        }   
                     }
+                } else if (dataPack.VlocityRecordSourceKey){
+                    this.recordSourceKeyToFilePath[dataPack.VlocityRecordSourceKey] = path.normalize(filePath);
                 }
-            } else if (dataPack.VlocityRecordSourceKey){
-                this.recordSourceKeyToFilePath[dataPack.VlocityRecordSourceKey] = path.normalize(filePath);
             }
+        } catch (e) {
+            VlocityUtils.error(`Unable to parse datapack meta file: ${path.basename(filePath)}`, e)
         }
-    } catch (e) {}
+    }
 }
 
 DataPacksBuilder.prototype.loadFilesAtPath = async function(srcpath, jobInfo, dataPackKey) {
@@ -387,7 +405,7 @@ DataPacksBuilder.prototype.loadFilesAtPath = async function(srcpath, jobInfo, da
             encoding = 'utf8';
         }
         var filemapkey = path.normalize(path.join(srcpath, filename));
-        filePromises.push(this.setFileData(filemapkey, filemapkey, encoding));
+        filePromises.push(this.setFileData(filemapkey, encoding));
     }
 
     if (filePromises.length > 0) {
@@ -707,12 +725,19 @@ DataPacksBuilder.prototype.getNextImports = function(importPath, jobInfo, curren
                                 return;
                             }
 
-                            if (jobInfo.currentStatus[parentKey] != null 
-                                && !(jobInfo.currentStatus[parentKey] == 'Success' 
+                            if (jobInfo.currentStatus[parentKey] != null ) {
+                                if (jobInfo.currentStatus[parentKey] == 'Success' 
                                     || jobInfo.currentStatus[parentKey] == 'Header' 
-                                    || jobInfo.currentStatus[parentKey] == 'AddedHeader') 
-                                && currentDataPackKeysInImport[parentKey] != true) {
-                                needsParents = true;
+                                    || jobInfo.currentStatus[parentKey] == 'AddedHeader')  {
+                                    VlocityUtils.verbose(`Parent deployed (datapack: ${dataPackKey}): ${parentKey}`);
+                                } else if (currentDataPackKeysInImport[parentKey] == true) {                                    
+                                    VlocityUtils.verbose(`Parent in current import (datapack: ${dataPackKey}): ${parentKey}`);
+                                } else {
+                                    VlocityUtils.verbose(`Skipping over ${dataPackKey}; parent not yet deployed: ${parentKey}; parent status: ${jobInfo.currentStatus[parentKey]}`);
+                                    needsParents = true;
+                                }
+                            } else {
+                                VlocityUtils.verbose(`Skipping unknown dependency ${parentKey} from datapack: ${dataPackKey}`);
                             }
                         });
 
@@ -770,6 +795,7 @@ DataPacksBuilder.prototype.getNextImports = function(importPath, jobInfo, curren
                                 && jobInfo.currentStatus[referenceKey] 
                                 && !(jobInfo.currentStatus[referenceKey] == 'Success' 
                                 || jobInfo.currentStatus[referenceKey] == 'Header')) {
+                                VlocityUtils.log(`Skipping over ${dataPackKey}; refernce not yet deployed: ${referenceKey}`);
                                 hasReference = true;
                             }
                         }
@@ -1083,6 +1109,11 @@ DataPacksBuilder.prototype.compile = function(lang, source, options, cb) {
     // add addtional languages here to support more compilation types    
     switch(lang) {
         case 'scss': {
+            // Lazy load SASS module; sass module is rather heavy; lazy loading it has a benefit
+            // as to not load the full 3MB JS code up front but instead only when required for the first time 
+            // by our datapack builder
+            sass = (sass || require('sass.js'));
+
             // intercept file loading requests from libsass
             sass.importer((request, done) => {
                 // (object) request
diff --git a/node_modules/vlocity/lib/datapackserrorhandling.js b/node_modules/vlocity/lib/datapackserrorhandling.js
index f475d46..4aabfe9 100644
--- a/node_modules/vlocity/lib/datapackserrorhandling.js
+++ b/node_modules/vlocity/lib/datapackserrorhandling.js
@@ -4,7 +4,7 @@ var yaml = require('js-yaml');
 
 var DataPacksErrorHandling = module.exports = function(vlocity) {
     this.vlocity = vlocity || {};
-    this.errorHandlingDefinition = yaml.safeLoad(fs.readFileSync(path.join(__dirname, "datapackserrorhandling.yaml"), 'utf8'));
+    this.errorHandlingDefinition = require("./datapackserrorhandling.yaml");
 };
 
 DataPacksErrorHandling.prototype.getSanitizedErrorMessage = async function(jobInfo, dataPack) {
diff --git a/node_modules/vlocity/lib/datapacksjob.js b/node_modules/vlocity/lib/datapacksjob.js
index b4f97c8..b0b3b7c 100644
--- a/node_modules/vlocity/lib/datapacksjob.js
+++ b/node_modules/vlocity/lib/datapacksjob.js
@@ -7,8 +7,8 @@ var childProcess = require('child_process');
 var DataPacksJob = module.exports = function(vlocity) {
     this.vlocity = vlocity || {};
 
-    this.defaultJobSettings = yaml.safeLoad(fs.readFileSync(path.join(__dirname, 'defaultjobsettings.yaml'), 'utf8'));
-    this.queryDefinitions = yaml.safeLoad(fs.readFileSync(path.join(__dirname, 'querydefinition.yaml'), 'utf8'));
+    this.defaultJobSettings = require('./defaultjobsettings.yaml');
+    this.queryDefinitions = require('./querydefinition.yaml');
     this.runningParallel = {};
     this.vlocity.relationMap = new Map();
     this.vlocity.insertIndexToSfIdMap = new Map();
@@ -26,7 +26,8 @@ var SUPPORTED_JOB_KEY_TO_OPTION_MAP = {
     source: 'source',
     alreadyExportedKeys: 'alreadyExportedKeys',
     exportPacksMaxSize: 'exportPacksMaxSize',
-    useVlocityTriggers: 'useVlocityTriggers'
+    useVlocityTriggers: 'useVlocityTriggers',
+    cancellationToken: 'cancellationToken'
 };
 
 var MAX_PER_GROUP = 10;
@@ -1076,7 +1077,10 @@ DataPacksJob.prototype.exportGroup = async function(inputMap) {
             return false;
         }
 
-        VlocityUtils.success('Exporting', dataPack.VlocityDataPackType, this.vlocity.datapacksutils.getDisplayName(dataPack));
+        var name = this.vlocity.datapacksutils.getDisplayName(dataPack);
+        if (name) {
+            VlocityUtils.success('Exporting', dataPack.VlocityDataPackType, name);
+        }
 
         return true;
     });
@@ -1892,6 +1896,7 @@ DataPacksJob.prototype.deployPack = async function(inputMap) {
 
         let result = await this.vlocity.datapacks.import(dataJson, this.getOptionsFromJobInfo(jobInfo));
 
+
         await new Promise(resolve => setTimeout(resolve, 1));
 
         // Prevent endless deploy loops due to server side issues
@@ -2039,7 +2044,8 @@ DataPacksJob.prototype.deployPack = async function(inputMap) {
             throw e;
         }
 
-        VlocityUtils.error('Error', 'Deploying Pack', e.stack);
+        VlocityUtils.error('Error', 'Deploying Pack', e.stack || e);
+        throw e;
     }
 }
 
diff --git a/node_modules/vlocity/lib/datapacksutils.js b/node_modules/vlocity/lib/datapacksutils.js
index 16b7f2e..18493f0 100644
--- a/node_modules/vlocity/lib/datapacksutils.js
+++ b/node_modules/vlocity/lib/datapacksutils.js
@@ -22,7 +22,7 @@ var DataPacksUtils = module.exports = function(vlocity) {
 
     CURRENT_INFO_FILE = path.join(vlocity.tempFolder, 'currentJobInfo.json');
 
-    this.dataPacksExpandedDefinition = yaml.safeLoad(fs.readFileSync(path.join(__dirname, 'datapacksexpanddefinition.yaml'), 'utf8'));
+    this.dataPacksExpandedDefinition = require('./datapacksexpanddefinition.yaml');
 
     this.runJavaScriptModules = {};
 
@@ -975,6 +975,9 @@ DataPacksUtils.prototype.getDisplayName = function(dataPack) {
         dataPackKey = dataPack.VlocityDataPackKey.substring(dataPack.VlocityDataPackKey.indexOf('/') + 1);
     } else if (dataPack.VlocityDataPackKeyForManifest) {
         dataPackKey = dataPack.VlocityDataPackKeyForManifest.substring(dataPack.VlocityDataPackKeyForManifest.indexOf('/') + 1);
+        if (dataPackKey == 'null') {
+            dataPackKey = null;
+        }
     } else if (dataPack.VlocityRecordSourceKey) {
         dataPackKey = dataPack.VlocityRecordSourceKey.substring(dataPack.VlocityRecordSourceKey.indexOf('/') + 1);
     }
diff --git a/node_modules/vlocity/lib/datapacktypes/attributecategory.js b/node_modules/vlocity/lib/datapacktypes/attributecategory.js
index d1849c0..af04645 100644
--- a/node_modules/vlocity/lib/datapacktypes/attributecategory.js
+++ b/node_modules/vlocity/lib/datapacktypes/attributecategory.js
@@ -54,5 +54,5 @@ AttributeCategory.prototype.handleAttributeCategoryDisplaySequence = async funct
     var jobInfoCopy = JSON.parse(JSON.stringify(jobInfo));
 
     await this.vlocity.datapacksexpand.expand(jobInfoCopy.projectPath + '/' + jobInfoCopy.expansionPath, {dataPacks: [dataPackWithError]}, jobInfoCopy);
-    await this.vlocity.datapacksbuilder.setFileData(filePath, filePath, "utf8");
+    await this.vlocity.datapacksbuilder.setFileData(filePath, "utf8");
 };
\ No newline at end of file
diff --git a/node_modules/vlocity/lib/utilityservice.js b/node_modules/vlocity/lib/utilityservice.js
index dafa90e..2a2ce94 100644
--- a/node_modules/vlocity/lib/utilityservice.js
+++ b/node_modules/vlocity/lib/utilityservice.js
@@ -400,10 +400,10 @@ UtilityService.prototype.getPackageVersion = async function() {
     
     VlocityUtils.verbose('Get Package Version');
 
-    if (!this.vlocity.packageVersion) {
+    if (!this.vlocity.PackageVersion) {
         var result = await this.vlocity.jsForceConnection.query("SELECT DurableId, Id, IsSalesforce, MajorVersion, MinorVersion, Name, NamespacePrefix FROM Publisher where NamespacePrefix = \'" + this.vlocity.namespace + "\' LIMIT 1");
 
-        this.vlocity.buildToolsVersionSettings = yaml.safeLoad(fs.readFileSync(path.join(__dirname, "buildToolsVersionSettings.yaml"), 'utf8'));
+        this.vlocity.buildToolsVersionSettings = require('./buildToolsVersionSettings.yaml');
 
         this.vlocity.BuildToolSettingLatestVersion = this.vlocity.buildToolsVersionSettings.latest;
 
diff --git a/node_modules/vlocity/lib/validationtest.js b/node_modules/vlocity/lib/validationtest.js
index d85f750..6d7ed7e 100644
--- a/node_modules/vlocity/lib/validationtest.js
+++ b/node_modules/vlocity/lib/validationtest.js
@@ -17,7 +17,7 @@ ValidationTest.prototype.validate = async function(jobInfo, currentContextData)
     };
 
     self.jobInfo = jobInfo;
-    self.config = yaml.safeLoad(fs.readFileSync(path.join(__dirname, 'validationtestsettings.yaml'), 'utf8'));
+    self.config = require('./validationtestsettings.yaml');
     self.vlocityMatchingKeys = await self.vlocity.utilityservice.getDRMatchingKeyFields();
     var allTests = self.loadAllTests();
     var runTestData = await self.groupRunTestData(currentContextData, allTests);
